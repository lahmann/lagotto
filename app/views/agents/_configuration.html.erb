<% if can?(:manage, Source) && @source.state > 1 && (controller.action_name == "edit" or (controller.action_name == "update" && !@source.errors.empty?)) %>
  <%= simple_form_for(@source.becomes(Source), :url => source_path(@source.name), :html => { :remote => true }) do |f| %>
    <% f.object = @source.becomes(@source.class) %>
    <fieldset>
      <legend>Edit Source</legend>

      <%= f.input :display_name %>
      <%= f.input :state_event, :as => :boolean, label: "Active", :checked_value => 'activate', :unchecked_value => 'inactivate', input_html: { checked: @source.active? }, hint: "Source is talking to external APIs" %>
      <%= f.input :private, :as => :boolean, hint: "Source not made available via API" %>
      <%= f.input :description, :input_html => { :rows => 3 } %>

      <% @source.url_fields.each do |field| %>
        <%= f.input field %>
      <% end %>

      <% unless @source.by_publisher? %>
        <% @source.publisher_fields.each do |field| %>
          <% if field == "password" %>
            <%= f.input field, :as => :string %>
          <% elsif field == "expires_at" %>
            <%= f.input field, :as => :hidden %>
          <% else %>
            <%= f.input field %>
          <% end %>
        <% end %>
      <% end %>

      <%= f.input :priority, :as => :numeric, label: "Priority of jobs",
                                                    hint: "Priority of background jobs" %>
      <%= f.input :workers, :as => :numeric, label: "Workers",
                                                    hint: "Max. number of workers" %>
      <%= f.input :job_batch_size, :as => :numeric, label: "Job queue",
                                                    hint: "Number of articles queued per job" %>
      <%= f.input :rate_limiting, :as => :numeric, label: false,
                                                    hint: "Max. requests per hour" %>

      <%= f.input :wait_time, label: false,
                              hint: "Time interval before more jobs can be added to the job queue (seconds)" %>
      <% if @source.queueable %>
        <%= f.input :staleness_week,  collection: INTERVAL_OPTIONS,
                                      label: "Update interval",
                                      include_blank: false,
                                      hint: "First 7 days after publication" %>
        <%= f.input :staleness_month, collection: INTERVAL_OPTIONS,
                                      label: false,
                                      include_blank: false,
                                      hint: "First 31 days after publication" %>
        <%= f.input :staleness_year,  collection: INTERVAL_OPTIONS,
                                      label: false,
                                      include_blank: false,
                                      hint: "First year after publication" %>
        <%= f.input :staleness_all,   collection: INTERVAL_OPTIONS,
                                      label: false,
                                      include_blank: false,
                                      hint: "More than one year after publication" %>
      <% else %>
        <%= f.input :cron_line, label: "Update interval",
                                hint: "Time in crontab format before more jobs can be added to the job queue" %>
      <% end %>

      <%= f.input :timeout, hint: "Time to wait for response from the source (seconds)"  %>

      <%= f.input :max_failed_queries, label: "Failed queries",
                                       hint: "Maximum number of failed queries allowed before being disabled" %>
      <%= f.input :max_failed_query_time_interval, collection: INTERVAL_OPTIONS,
                                                   label: false,
                                                   include_blank: false,
                                                   hint: "Time interval for maximum number of failed queries" %>
      <%= f.input :disable_delay, label: false,
                                  hint: "Time interval before source is disabled after maximum number of failed queries is reached (seconds)" %>

      <div class="form-group">
        <%= f.submit "Save ", class: "btn btn-default" %>
        <%= link_to 'Cancel', source_path(@source.name), { :remote => true, :class => 'btn' } %>
      </div>
    </fieldset>
  <% end %>
<% else %>
  <% if can?(:manage, Source) && @source.state > 1 %>
    <%= link_to '<span class="glyphicon glyphicon-pencil"></span>'.html_safe, edit_source_path(@source.name), { :remote => true, :class => 'btn btn-default btn-sm pull-right configuration-edit', :title => "Edit" } %>
  <% end %>
  <table class="table table-striped">
    <thead>
    </thead>
    <tbody>
      <% @source.url_fields.each do |field| %>
        <tr>
          <th><%= field.to_s.gsub(/_/, " ").capitalize %></th>
          <td><%= @source.send(field) %></td>
        </tr>
      <% end %>
      <% unless @source.by_publisher? %>
        <% @source.publisher_fields.each do |field| %>
          <tr>
            <th><%= field.to_s.gsub(/_/, " ").capitalize %></th>
            <% if [:username, :password, :client_id, :secret, :access_token, :api_key].include?(field) && cannot?(:manage, Source) %>
              <td><em>hidden</em></td>
            <% else %>
              <td><%= @source.send(field) %></td>
            <% end %>
          </tr>
        <% end %>
      <% end %>
      <% if @source.private %>
        <tr>
          <th>Private source</th>
          <td>Source not made available via API</td>
        </tr>
      <% end %>
      <tr>
        <th>Job queue</th>
        <td>
          <%= @source.rate_limiting %> per hour rate-limiting</br>
          <%= @source.priority %> is the priority of jobs</br>
          <%= pluralize(@source.workers, "worker") %></br>
          <%= @source.job_batch_size %> articles per job</br>
          <%= @source.wait_time %> seconds before more jobs can be added</br>
        </td>
      </tr>
      <tr>
        <th>Update interval</th>
        <% if @source.queueable %>
          <td><%= @source.staleness_with_limits.map { |i, j| distance_of_time(j) + " for articles published #{i}" }.join("</br>").html_safe %></td>
        <% else %>
          <td>Next update <%= @source.cron_line ? CronParser.new(@source.cron_line).next(Time.zone.now).to_s(:short) + " UTC" : "N/A" %></td>
        <% end %>
      </tr>
      <tr>
        <th>Timeout</th>
        <td><%=h @source.timeout %> seconds wait time for response from the source</td>
      </tr>
      <tr>
        <th>Failed queries</th>
        <td>
          <%= @source.max_failed_queries %> failed queries allowed before source is disabled</br>
          <%= distance_of_time(@source.max_failed_query_time_interval) %> interval for checking maximum number of failed queries</br>
          <%= @source.disable_delay %> seconds before source is disabled after maximum number of failed queries is reached
        </td>
      </tr>
    </tbody>
  </table>
<% end %>
