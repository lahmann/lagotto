<div class="panel panel-default">
  <div class="panel-heading panel-title">
    <% if can?(:manage, Agent) && @agent.state > 1 && controller.action_name != "edit" && !(controller.action_name == "update" && !@agent.errors.empty?) %>
      <div class="btn-toolbar pull-right">
        <div class="btn-group btn-group-sm">
          <%= link_to '<span class="glyphicon glyphicon-pencil"></span>'.html_safe, edit_agent_path(@agent.name), { :remote => true, :class => 'btn btn-default btn-sm pull-right configuration-edit', :title => "Edit" } %>
        </div>
      </div>
    <% end %>
    Configuration
  </div>
  <% if can?(:manage, Agent) && @agent.state > 1 && (controller.action_name == "edit" || (controller.action_name == "update" && !@agent.errors.empty?)) %>
    <div class="panel-body">
      <%= simple_form_for(@agent.becomes(Agent), :url => agent_path(@agent.name), :html => { :remote => true }) do |f| %>
        <% f.object = @agent.becomes(@agent.class) %>

        <%= f.input :title %>
        <%= f.input :state_event, :as => :boolean, label: "Active", :checked_value => 'activate', :unchecked_value => 'inactivate', input_html: { checked: @agent.active? }, hint: "Source is talking to external APIs" %>

        <% @agent.url_fields.each do |field| %>
          <%= f.input field %>
        <% end %>

        <% unless @agent.by_publisher? %>
          <% @agent.publisher_fields.each do |field| %>
            <% if field == "password" %>
              <%= f.input field, :as => :string %>
            <% elsif field == "expires_at" %>
              <%= f.input field, :as => :hidden %>
            <% else %>
              <%= f.input field %>
            <% end %>
          <% end %>
        <% end %>

        <%= f.input :priority, :as => :numeric, label: "Priority of jobs",
                                                      hint: "Priority of background jobs" %>
        <%= f.input :workers, :as => :numeric, label: "Workers",
                                                      hint: "Max. number of workers" %>
        <%= f.input :job_batch_size, :as => :numeric, label: "Job queue",
                                                      hint: "Number of articles queued per job" %>
        <%= f.input :rate_limiting, :as => :numeric, label: false,
                                                      hint: "Max. requests per hour" %>

        <%= f.input :wait_time, label: false,
                                hint: "Time interval before more jobs can be added to the job queue (seconds)" %>
        <% if @agent.kind == "article" %>
          <%= f.input :staleness_week,  collection: INTERVAL_OPTIONS,
                                        label: "Update interval",
                                        include_blank: false,
                                        hint: "First 7 days after publication" %>
          <%= f.input :staleness_month, collection: INTERVAL_OPTIONS,
                                        label: false,
                                        include_blank: false,
                                        hint: "First 31 days after publication" %>
          <%= f.input :staleness_year,  collection: INTERVAL_OPTIONS,
                                        label: false,
                                        include_blank: false,
                                        hint: "First year after publication" %>
          <%= f.input :staleness_all,   collection: INTERVAL_OPTIONS,
                                        label: false,
                                        include_blank: false,
                                        hint: "More than one year after publication" %>
        <% else %>
          <%= f.input :cron_line, label: "Update interval",
                                  hint: "Time in crontab format before more jobs can be added to the job queue" %>
        <% end %>

        <%= f.input :timeout, hint: "Time to wait for response from the agent (seconds)"  %>

        <%= f.input :max_failed_queries, label: "Failed queries",
                                         hint: "Maximum number of failed queries allowed before being disabled" %>
        <%= f.input :max_failed_query_time_interval, collection: INTERVAL_OPTIONS,
                                                     label: false,
                                                     include_blank: false,
                                                     hint: "Time interval for maximum number of failed queries" %>
        <%= f.input :disable_delay, label: false,
                                    hint: "Time interval before agent is disabled after maximum number of failed queries is reached (seconds)" %>

        <div class="form-group">
          <%= f.submit "Save ", class: "btn btn-default" %>
          <%= link_to 'Cancel', agent_path(@agent.name), { :remote => true, :class => 'btn' } %>
        </div>
      <% end %>
    </div>
  <% else %>
    <table class="table" id="ConfigurationTable">
      <tbody>
        <% @agent.url_fields.each do |field| %>
          <tr>
            <th><%= field.to_s.gsub(/_/, " ").capitalize %></th>
            <td><%= @agent.send(field) %></td>
          </tr>
        <% end %>
        <% unless @agent.by_publisher? %>
          <% @agent.publisher_fields.each do |field| %>
            <tr>
              <th><%= field.to_s.gsub(/_/, " ").capitalize %></th>
              <% if [:username, :password, :client_id, :secret, :access_token, :api_key].include?(field) && cannot?(:manage, Source) %>
                <td><em>hidden</em></td>
              <% else %>
                <td><%= @agent.send(field) %></td>
              <% end %>
            </tr>
          <% end %>
        <% end %>
        <tr>
          <th>Job queue</th>
          <td>
            <%= @agent.rate_limiting %> per hour rate-limiting</br>
            <%= @agent.priority %> is the priority of jobs</br>
            <%= pluralize(@agent.workers, "worker") %></br>
            <%= @agent.job_batch_size %> articles per job</br>
            <%= @agent.wait_time %> seconds before more jobs can be added</br>
          </td>
        </tr>
        <tr>
          <th>Update interval</th>
          <% if @agent.kind == "article" %>
            <td><%= @agent.staleness_with_limits.map { |i, j| distance_of_time(j) + " for articles published #{i}" }.join("</br>").html_safe %></td>
          <% else %>
            <td>Next update <%= @agent.cron_line ? CronParser.new(@agent.cron_line).next(Time.zone.now).to_s(:short) + " UTC" : "N/A" %></td>
          <% end %>
        </tr>
        <tr>
          <th>Timeout</th>
          <td><%=h @agent.timeout %> seconds wait time for response from the agent</td>
        </tr>
        <tr>
          <th>Failed queries</th>
          <td>
            <%= @agent.max_failed_queries %> failed queries allowed before agent is disabled</br>
            <%= distance_of_time(@agent.max_failed_query_time_interval) %> interval for checking maximum number of failed queries</br>
            <%= @agent.disable_delay %> seconds before agent is disabled after maximum number of failed queries is reached
          </td>
        </tr>
      </tbody>
    </table>
  <% end %>
</div>
